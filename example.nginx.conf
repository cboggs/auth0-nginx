env AUTH0_ACCOUNT_DOMAIN;
env AUTH0_CLIENT_CONNECTION;
env AUTH0_CLIENT_ID;
env AUTH0_CLIENT_SECRET;

# Expose key/audience pairs for all APIs
env API1_KEY;
env API1_AUD;
env API2_KEY;
env API2_AUD;

events {
    worker_connections 256;
}

http {
    # DNS Resolver. You can use your own.
    resolver 4.2.2.4;

    # You may need to configure this to use a different file. Please see the Readme.
    lua_ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.crt;
    lua_ssl_verify_depth 2;

    server {
        listen 8080;
        error_page 401 /empty;

        # Load environment variables into nginx/Lua variable scope
        set_by_lua $api1_key 'return os.getenv("API1_KEY")';
        set_by_lua $api1_aud 'return os.getenv("API1_AUD")';
        set_by_lua $api2_key 'return os.getenv("API2_KEY")';
        set_by_lua $api2_aud 'return os.getenv("API2_AUD")';

        # Get account from API1
        location /api1/getAccount/ {
            access_by_lua_block {
                local auth0 = require("auth0-nginx")
                auth0.getAccount(ngx.var.api1_key, ngx.var.api1_aud)
            }
            proxy_pass https://www.whatismybrowser.com/detect/what-http-headers-is-my-browser-sending;
        }

        # Require account from API2
        location /api2/requireAccount/ {
            access_by_lua_block {
                local auth0 = require("auth0-nginx")
                auth0.requireAccount(ngx.var.api2_key, ngx.var.api2_aud)
            }
            proxy_pass https://www.whatismybrowser.com/detect/what-http-headers-is-my-browser-sending;
        }

        location = /oauth/token {
            content_by_lua_block {
                local auth0 = require("auth0-nginx")
                auth0.oauthTokenEndpoint()
            }
        }

        location = /oauth/social_token {
            content_by_lua_block {
                local auth0 = require('auth0-nginx')
                auth0.socialOauthTokenEndpoint()
            }
        }

        location = /signup {
            content_by_lua_block {
                local auth0 = require("auth0-nginx")
                auth0.signup()
            }
        }

        location = /change_password {
            content_by_lua_block {
                local auth0 = require("auth0-nginx")
                auth0.changePassword()
            }
        }

        location = /social_login {
            content_by_lua_block {
                local auth0 = require('auth0-nginx')
                auth0.socialLogin()
            }
        }

        location /empty {
            internal;
            return 200 '';
        }
    }
}
