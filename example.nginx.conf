env AUTH0_CLIENT_ID;
env AUTH0_CLIENT_SECRET;
env AUTH0_ACCOUNT_DOMAIN;

env API_KEY;
env API_AUD;

events {
    worker_connections 256;
}

http {
    # DNS Resolver. You can use your own.
    resolver 4.2.2.4;

    # You may need to configure this to use a different file. Please see the Readme.
    lua_ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.crt;
    lua_ssl_verify_depth 2;

    server {
        listen 8080;
        error_page 401 /empty;

        set_by_lua $api_key 'return os.getenv("API_KEY")';
        set_by_lua $api_aud 'return os.getenv("API_AUD")';

        location /getAccount/ {
            access_by_lua_block {
                local auth0 = require("auth0-nginx")
                auth0.getAccount(ngx.var.api_key, ngx.var.api_aud)
            }
            proxy_pass https://www.whatismybrowser.com/detect/what-http-headers-is-my-browser-sending;
        }

        location /requireAccount/ {
            access_by_lua_block {
                local auth0 = require("auth0-nginx")
                auth0.requireAccount(ngx.var.api_key, ngx.var.api_aud)
            }
            proxy_pass https://www.whatismybrowser.com/detect/what-http-headers-is-my-browser-sending;
        }

        location = /oauth/token {
            content_by_lua_block {
                local auth0 = require('auth0-nginx')
                auth0.oauthTokenEndpoint()
            }
        }

        location /empty {
            internal;
            return 200 '';
        }
    }
}
